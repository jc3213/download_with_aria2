name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'chromium/manifest.json'
      - 'chromium_mv3/manifest.json'
      - 'firefox/manifest.json'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install tools
        run: sudo apt-get install -y zip jq

      - name: Extract highest version
        id: version
        run: |
          V1=$(jq -r .version chromium/manifest.json)
          V2=$(jq -r .version chromium_mv3/manifest.json)
          V3=$(jq -r .version firefox/manifest.json)

          echo "Found versions: $V1, $V2, $V3"

          HIGHEST=$(printf "%s\n%s\n%s" "$V1" "$V2" "$V3" | sort -V | tail -n 1)

          echo "Selected highest version: $HIGHEST"
          echo "version=$HIGHEST" >> $GITHUB_OUTPUT

      - name: Minify Chromium
        uses: devatherock/minify-js@v3.1.0
        with:
          directory: 'chromium'
          add_suffix: false

      - name: Minify Chromium MV3
        uses: devatherock/minify-js@v3.1.0
        with:
          directory: 'chromium_mv3'
          add_suffix: false

      - name: Minify Firefox
        uses: devatherock/minify-js@v3.1.0
        with:
          directory: 'firefox'
          add_suffix: false

      - name: Package Chromium
        run: |
          ZIP_NAME="chromium-${{ steps.version.outputs.version }}.zip"
          (cd chromium && zip -r "../$ZIP_NAME" .)

      - name: Package Chromium MV3
        run: |
          ZIP_NAME="chromium_mv3-${{ steps.version.outputs.version }}.zip"
          mkdir -p build_mv3
          cp -r chromium/* build_mv3/
          cp -r chromium_mv3/* build_mv3/
          (cd build_mv3 && zip -r "../$ZIP_NAME" .)
          rm -rf build_mv3

      - name: Package Firefox
        run: |
          ZIP_NAME="firefox-${{ steps.version.outputs.version }}.zip"
          mkdir -p build_firefox
          cp -r chromium/* build_firefox/
          cp -r firefox/* build_firefox/
          (cd build_firefox && zip -r "../$ZIP_NAME" .)
          rm -rf build_firefox

      - name: Create GitHub Release
        run: |
          TAG="${{ steps.version.outputs.version }}"
          TITLE="v${TAG}"
          gh release create "$TAG" \
            "chromium-${TAG}.zip" \
            "chromium_mv3-${TAG}.zip" \
            "firefox-${TAG}.zip" \
            --title "$TITLE" \
            --notes "Auto-packaged extensions for version $TITLE"
